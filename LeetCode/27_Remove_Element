***
Given an array nums and a value val, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

***

class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        """
        :type nums: List[int]
        :type val: int
        :rtype: int
        l is slow pointer
        i is fast point
        scan the list from very beginning, when the num[i] != val, fill slow pointer with the value on this spot, if ==, skip.
        """
        
        if not len(nums):
            return 0
        l = 0
        for i in range(0,len(nums)):
            if nums[i] != val:
                nums[l] = nums[i]
                l+=1
        return l
