***
Implement strStr().

Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

***

***
My idea:
#1 point i to string
#2 point j to needle
for i from beginning till the end
if s[i] = n [0], j += 1, till end of j or <>
i += 1

***

#return haystack.find(needle)


class Solution:
    def strStr(self, haystack: str, needle: str) -> int:
        if haystack is None or needle is None:
            return -1
        elif needle == "":
            return 0
        else:
            lens, lenp = len(haystack), len(needle)
            if lens < lenp:
                return -1
            else:
                i = j = 0
                while i < lens and j < lenp:
                    # Char matches between string and pattern
                    if haystack[i] == needle[j]:
                         i += 1
                         j += 1
                    else:
                        # Mismatch, get index of next char in string as pin
                        pin = i + lenp - j
                        # Pin overhead, must be no matches any more
                        if pin >= lens:
                            return -1
                        else:
                            # Find occurrence of haystack[pin] in pattern
                            k = lenp - 1
                            while k >= 0 and needle[k] != haystack[pin]:
                                k -= 1
                            # Update i and j for next loop
                            # Align two strings
                            i, j = pin - k, 0
                # Note: if match, result index should be i - j
                return i - j if j == lenp else -1
