***
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

My idea is to:
step 1) add-up a continuous positive / negative integers
2) new list is a pattern of positive / negative / positive / nagative
3) check if the positve after negative is bigger than the abs(negative), keep add-on
or set this is the max value
4) start from the next positive num.
***


class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        max_ending_here = max_so_far = nums[0]
        for x in nums[1:]:
            max_ending_here = max(x, max_ending_here + x)
            max_so_far = max(max_so_far, max_ending_here)
        return max_so_far
***
if max_ending_here < 0:
            start = i + 1
        elif max_ending_here == max_so_far:
            startOld = start
            end = i
    return (max_so_far , startOld, end)
***
